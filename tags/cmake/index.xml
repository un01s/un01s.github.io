<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CMake on un01s code</title>
    <link>https://un01s.github.io/tags/cmake/</link>
    <description>Recent content in CMake on un01s code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Mar 2022 20:03:36 -0700</lastBuildDate><atom:link href="https://un01s.github.io/tags/cmake/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reading Code of Toit (002)</title>
      <link>https://un01s.github.io/posts/20220301/</link>
      <pubDate>Tue, 01 Mar 2022 20:03:36 -0700</pubDate>
      
      <guid>https://un01s.github.io/posts/20220301/</guid>
      <description>After toit_start(), we have toit_esp32.cc to read. The first one is toit::start(). Toit here is just a namespace. As we know that toit supports OTA (over-the-air update) through WiFi and esp32 device is set to be a station (STA instead of AP).
What we have here is as follows:
 RtcMemory::set_up(); FlashRegistry::set_up(); OS::set_up(); esp_partition_find_first(); setup_program(support_ota); Scheduler::ExitState exit_state; VM vm; vm.load_platform_event_sources(); int groud_id = vm.scheduler()-&amp;gt;next_group_id(); exit_state = vm.scheduler()-&amp;gt;run_boot_program(program, null, group_id); OS::tear_down(); FlashRegistry::tear_down();  After these, esp32 may go to deep sleep.</description>
    </item>
    
  </channel>
</rss>
